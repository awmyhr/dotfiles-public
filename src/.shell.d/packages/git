#!/bin/sh
#===============================================================================
#
#         FILE: .shell.d/packages/git
#
#        USAGE: (should be sourced by .shell.d/settings)
#
#  DESCRIPTION: Git functions, aliases, etc for use across shells.
#
#      OPTIONS: ---
# REQUIREMENTS: Bourne-compatible shell
#               git (via 'git-core')
#    OPTIONALS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: awmyhr, awmyhr@gmail.com
#      VERSION: 1.0.0-alpha
#      CREATED: 2016-10-04
#     REVISION: 2016-10-04
#===============================================================================
#----------------------------------------------------------------------
#-- Notes/known bugs/other issues
#----------------------------------------------------------------------

#=== FUNCTION ================================================================
# NAME: usage
# DESCRIPTION: Display usage information for this script.
# PARAMETER 1: 
#===============================================================================# Get the status of the working tree (copied and modified from git.zsh)
function _git_prompt_status() {
    ## NOTE: this may not work in git versions older than 1.7.2
    local GITSTAT=''
    local STATUS=''
    ## NOTE: This method of building FLAGS isn't compatible w/bash
    ##       I've tried many different things, can't quite get it...
    local FLAGS=('--porcelain')
    FLAGS+=' -b'
    #local FLAGS=('--porcelain -b')
    [[ "$VCS_IGNORE_SUBMODULES" == "true" ]]      && FLAGS+='--ignore-submodules'
    [[ "$VCS_IGNORE_UNTRACKED_FILES" == "true" ]] && FLAGS+='--untracked-files=no'
    GITSTAT=$(eval command git status ${FLAGS} 2> /dev/null)
   #GITSTAT=$(eval command git status ${FLAGS})

    # Ahead/behind/diverged
    if $(echo "$GITSTAT" | grep '^## [^ ]\+ .*ahead' &> /dev/null); then
        STATUS="${c_pDEBUG}${VCS_AHEAD}$STATUS "
    elif $(echo "$GITSTAT" | grep '^## [^ ]\+ .*behind' &> /dev/null); then
        STATUS="${c_pCRIT}${VCS_BEHIND}$STATUS "
    elif $(echo "$GITSTAT" | grep '^## [^ ]\+ .*diverged' &> /dev/null); then
        STATUS="${c_pEMERG}${VCS_DIVERGED}$STATUS "
    fi
    GITSTAT=`echo $GITSTAT | sed 1d`

    if [[ -n $GITSTAT ]]; then
        STATUS="${c_pCRIT}${VCS_DIRTY}$STATUS"
        # Non-staged
        if $(echo "$GITSTAT" | grep '^?? ' &> /dev/null); then
            STATUS="${STATUS}${c_pNOTICE}${VCS_UNTRACKED}"
        fi
        if $(echo "$GITSTAT" | grep '^UU ' &> /dev/null); then
            STATUS="${STATUS}${c_pCRIT}${VCS_UNMERGED}"
        fi
        if $(echo "$GITSTAT" | grep '^ D ' &> /dev/null); then
            STATUS="${STATUS}${c_pCRIT}${VCS_DELETED}"
        fi

        if $(echo "$GITSTAT" | grep '^.M ' &> /dev/null); then
            STATUS="${STATUS}${c_pWARNING}${VCS_MODIFIED}"
        elif $(echo "$GITSTAT" | grep '^AM ' &> /dev/null); then
            STATUS="${STATUS}${c_pWARNING}${VCS_MODIFIED}"
        elif $(echo "$GITSTAT" | grep '^ T ' &> /dev/null); then
            STATUS="${STATUS}${c_pWARNING}${VCS_MODIFIED}"
        fi

        # Staged
        if $(echo "$GITSTAT" | grep '^D  ' &> /dev/null); then
            STATUS="${STATUS}${c_pINFO}${VCS_DELETED}"
        fi
        if $(echo "$GITSTAT" | grep '^R' &> /dev/null); then
            STATUS="${STATUS}${c_pINFO}${VCS_RENAMED}"
        fi
        if $(echo "$GITSTAT" | grep '^M' &> /dev/null); then
            STATUS="${STATUS}${c_pINFO}${VCS_MODIFIED}"
        fi
        if $(echo "$GITSTAT" | grep '^A' &> /dev/null); then
            STATUS="${STATUS}${c_pINFO}${VCS_ADDED}"
        fi
        if $(echo "$GITSTAT" | grep '^C' &> /dev/null); then
            STATUS="${STATUS}${c_pINFO}${VCS_COPIED}"
        fi
    else
        STATUS="${c_pINFO}${VCS_CLEAN}$STATUS"
    fi

    # Put a space at the beginning
    if $(echo -n "$STATUS" | grep '.*' &> /dev/null); then
        STATUS=" $STATUS"
    fi

    echo $STATUS
}

# Checks if working tree is dirty (copied and modified from git.zsh)
function _parse_git_dirty() {
    ## NOTE: this may not work in git versions older than 1.7.2
    local GITSTAT=''
    local FLAGS=('--porcelain')
    [[ "$VCS_IGNORE_SUBMODULES" == "true" ]]      && FLAGS+='--ignore-submodules'
    [[ "$VCS_IGNORE_UNTRACKED_FILES" == "true" ]] && FLAGS+='--untracked-files=no'
    GITSTAT=$(eval command git status $FLAGS 2> /dev/null | tail -n1)

    if [[ -n $GITSTAT ]]; then
        echo " ${c_pCRIT}$VCS_DIRTY"
    else
        echo " ${c_pINFO}$VCS_CLEAN"
    fi
}

# get the name of the branch we are on (copied and modified from git.zsh)
function _git_prompt() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo " ${c_pDEBUG}‹${ref#refs/heads/}$(_git_prompt_status)${c_pDEBUG}›"
}
