#!/bin/sh
# [SublimeLinter shellcheck-exclude:"SC2154" ]
#===============================================================================
#
#         FILE: .shell.d/packages/git
#
#        USAGE: (should be sourced by .shell.d/settings)
#
#  DESCRIPTION: Git functions, aliases, etc for use across shells.
#      OPTIONS: ---
# REQUIREMENTS: Bourne-compatible shell
#               git (via 'git-core')
#    OPTIONALS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: awmyhr, awmyhr@gmail.com
#      VERSION: 1.0.0-alpha
#      CREATED: 2016-10-04
#     REVISION: 2016-10-11
#===============================================================================
#----------------------------------------------------------------------
#-- Notes/known bugs/other issues
#----------------------------------------------------------------------

#=== FUNCTION ================================================================
# NAME: _git_prompt_status
# DESCRIPTION:  parse status of current repo, return string of symbols
#               (originally from some oh-my-zsh theme files)
# NOTE: this may not work in git versions older than 1.7.2
#===============================================================================# Get the status of the working tree (copied and modified from git.zsh)
_git_prompt_status() {
    local GITSTAT=''
    local STATUS=''
    local FLAGS=''
    [ "${VCS_IGNORE_SUBMODULES}" = "true" ]      && \
                            FLAGS=$(printf -- "${FLAGS} --ignore-submodules")
    [ "${VCS_IGNORE_UNTRACKED_FILES}" = "true" ] && \
                            FLAGS=$(printf -- "${FLAGS} --untracked-files=no")
    
    if $(expr match "$GITSTAT" '^## [^ ]\+ .*ahead' 2>/dev/null); then
        STATUS="${c_pDEBUG}${s_AHEAD}$STATUS "
    elif $(expr match "$GITSTAT" '^## [^ ]\+ .*behind' 2>/dev/null); then
        STATUS="${c_pCRIT}${s_BEHIND}$STATUS "
    elif $(expr match "$GITSTAT" '^## [^ ]\+ .*diverged' 2>/dev/null); then
        STATUS="${c_pEMERG}${s_DIVERGED}$STATUS "
    fi
    GITSTAT=$(echo "${GITSTAT}" | sed 1d)

    if [ -n "${GITSTAT}" ]; then
        STATUS="${c_pCRIT}${s_DIRTY}${STATUS}"
        # Non-staged
        if $(expr match "$GITSTAT" '^?? ' 2>/dev/null); then
            STATUS="${STATUS}${c_pNOTICE}${s_UNTRACKED}"
        fi
        if $(expr match "$GITSTAT" '^UU ' 2>/dev/null); then
            STATUS="${STATUS}${c_pCRIT}${s_UNMERGED}"
        fi
        if $(expr match "$GITSTAT" '^ D ' 2>/dev/null); then
            STATUS="${STATUS}${c_pCRIT}${s_DELETED}"
        fi

        if $(expr match "$GITSTAT" '^.M ' 2>/dev/null); then
            STATUS="${STATUS}${c_pWARNING}${s_MODIFIED}"
        elif $(expr match "$GITSTAT" '^AM ' 2>/dev/null); then
            STATUS="${STATUS}${c_pWARNING}${s_MODIFIED}"
        elif $(expr match "$GITSTAT" '^ T ' 2>/dev/null); then
            STATUS="${STATUS}${c_pWARNING}${s_MODIFIED}"
        fi

        # Staged
        if $(expr match "$GITSTAT" '^D  ' 2>/dev/null); then
            STATUS="${STATUS}${c_pINFO}${s_DELETED}"
        fi
        if $(expr match "$GITSTAT" '^R' 2>/dev/null); then
            STATUS="${STATUS}${c_pINFO}${s_RENAMED}"
        fi
        if $(expr match "$GITSTAT" '^M' 2>/dev/null); then
            STATUS="${STATUS}${c_pINFO}${s_MODIFIED}"
        fi
        if $(expr match "$GITSTAT" '^A' 2>/dev/null); then
            STATUS="${STATUS}${c_pINFO}${s_ADDED}"
        fi
        if $(expr match "$GITSTAT" '^C' 2>/dev/null); then
            STATUS="${STATUS}${c_pINFO}${s_COPIED}"
        fi
    else
        STATUS="${c_pINFO}${s_CLEAN}${STATUS}"
    fi

    printf "%s" " ${STATUS}"                # Put a space at the beginning
}

#=== FUNCTION ==================================================================
# NAME: _git_parse_dirty
# DESCRIPTION: Checks if working tree is dirty
#              (originally from .oh-my-zsh/lib/git.zsh)
# NOTE: this may not work in git versions older than 1.7.2
#===============================================================================
_git_parse_dirty() {
    local GITSTAT=''
    local FLAGS=''
    [ "${VCS_IGNORE_SUBMODULES}" = "true" ]      && \
                            FLAGS=$(printf -- "${FLAGS} --ignore-submodules")
    [ "${VCS_IGNORE_UNTRACKED_FILES}" = "true" ] && \
                            FLAGS=$(printf -- "${FLAGS} --untracked-files=no")
    GITSTAT=$(git status --porcelain "${FLAGS}" 2>/dev/null | tail -n1)

    if [ -n "${GITSTAT}" ]; then
        printf "%s" " ${c_pCRIT}${s_DIRTY}"
    else
        printf "%s" " ${c_pINFO}${s_CLEAN}"
    fi
}

#=== FUNCTION ==================================================================
# NAME: _git_prompt
# DESCRIPTION: get the name of the branch we are on
#              (originally from .oh-my-zsh/lib/git.zsh)
#===============================================================================
_git_prompt() {
    ref=$(git symbolic-ref HEAD 2>/dev/null) || return
    printf "%s" "${c_pDEBUG}‹${ref#refs/heads/}$(_git_prompt_status)${c_pDEBUG}›"
}

#===============================================================================
#----------------------------------------------------------------------
export ISSET_GIT=1
#----------------------------------------------------------------------
#===============================================================================
