#!/bin/sh
#===============================================================================
#
#         FILE: .shell.d/functions/general
#
#        USAGE: (should be sourced by .shell.d/settings)
#
#  DESCRIPTION: General functions for use across shells.
#
#      OPTIONS: ---
# REQUIREMENTS: Bourne-compatible shell
#    OPTIONALS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: awmyhr, awmyhr@gmail.com
#      VERSION: 1.0.0
#      CREATED: ????-??-??
#     REVISION: 2016-10-04
#===============================================================================
#----------------------------------------------------------------------
#-- Notes/known bugs/other issues
#----------------------------------------------------------------------

#=== FUNCTION ==================================================================
# NAME: timestamp
# DESCRIPTION: Return currant date/time in user-defined format for appending to 
#               a filename (or some other similar thing)
#    REQUIRED: Environment variable DEFAULT_TIMESTAMP containing format string
#               for date command.
#===============================================================================
timestamp() {
    date "${DEFAULT_TIMESTAMP}"
}

#=== FUNCTION ==================================================================
# NAME: stringmatch
# DESCRIPTION: return true if second string contains first string, false if not
#       USAGE: stringmatch needle heystack
#===============================================================================
# Originally found here: http://www.etalabs.net/sh_tricks.html
stringmatch() {
    case "${2}" in 
        *${1}*) 
            return 0 
            ;; 
        *) 
            return 1 
            ;; 
    esac ;
    return 1        # This should never execute
}

#=== FUNCTION ==================================================================
# NAME: pathmunge
# DESCRIPTION: Add a directory to PATH
#       USAGE: pathmunge /new/path [after]
#===============================================================================
# This was originally taken from /etc/profile on Fedora 24
pathmunge() {
    case ":${PATH}:" in
        *:"${1}":*)
            ;;
        *)
            if [ "${2}" = "after" ] ; then
                PATH="${PATH}:${1}"
            else
                PATH="${1}:${PATH}"
            fi
    esac
}

#=== FUNCTION ==================================================================
# NAME: manpathmunge
# DESCRIPTION: Add a directory to MANPATH
#       USAGE: manpathmunge /new/man/path [after]
#===============================================================================
# Until I figure out how to use a variable to assing a value to another variable
manpathmunge() {
    case ":${MANPATH}:" in
        *:"${1}":*)
            ;;
        *)
            if [ "${2}" = "after" ] ; then
                MANPATH="${MANPATH}:${1}"
            else
                MANPATH="${1}:${MANPATH}"
            fi
    esac
}

#=== FUNCTION ==================================================================
# NAME: splitvar
# DESCRIPTION: split a series of words into different varaibles
#       USAGE: splitvar "word list" ' ' VAR1 VAR2
#===============================================================================
# This is originally from: http://blog.isonoe.net/post/2010/10/01/Split-a-string-by-character(s)-in-POSIX-shell
splitvar() {
    local string IFS
 
    string="${1}"
    IFS="${2}"
    shift 2
    read -r -- "$@" <<EOF
$string
EOF
}

###############################################################################
### Functions for prompts

# need a solid, quick way to detect svn/fossil/darcs repos (copied and modified from some zsh thing)
function _vcs_prompt_char() {
    git branch >/dev/null 2>/dev/null && echo $VCS_GIT && return
    hg  root   >/dev/null 2>/dev/null && echo $VCS_HG  && return
    #svn status >/dev/null 2>/dev/null && echo $VCS_SVN && return
    #fossile status  >/dev/null 2>/dev/null && echo $VCS_FOSSIL && return
    #darcs status  >/dev/null 2>/dev/null && echo $VCS_DARCS && return
    echo $VCS_NONE
}

function _return_code() { 
    exit_code=$?
    [[ $exit_code -ne 0 ]] && printf -- "$exit_code â†µ"
}
###############################################################################
### Limited use functions
if [[ -x '/opt/pbis/bin/find-user-by-name' ]]; then
  function name() { /opt/pbis/bin/find-user-by-name "$@" | grep -i gecos | awk '{ print $2 " " $3; }'; }
else
  function name() { echo 'PBIS not found.'; }
fi
